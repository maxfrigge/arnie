{"version":3,"sources":["../../src/providers/Context.js"],"names":["ContextProvider","extendedContext","context","funcDetails","payload","Object","keys","reduce","key","debugger","proto","constructor","prototype","Function","contextValue","proxy","sourceKeys","source","target","obj","objKey","args","send","method","color","getColor","apply","defineProperty","get","set","value","getOwnPropertyNames"],"mappings":";;;;;kBAAwBA,e;AAAT,SAASA,eAAT,CAA0BC,eAA1B,EAA2C;AACxD,SAAO,UAACC,OAAD,EAAUC,WAAV,EAAuBC,OAAvB,EAAmC;AACxC,WAAOC,OAAOC,IAAP,CAAYL,eAAZ,EAA6BM,MAA7B,CAAoC,UAACL,OAAD,EAAUM,GAAV,EAAkB;AAC3D,UAAIN,QAAQO,QAAZ,EAAsB;AAAA;AACpBP,kBAAQM,GAAR,IAAe,EAAf;;AAEA;;;;;AAKA,cAAIE,QAAQ,IAAZ;;AAEA,cACET,gBAAgBO,GAAhB,EAAqBG,WAArB,IACAV,gBAAgBO,GAAhB,EAAqBG,WAArB,CAAiCC,SAAjC,CAA2CD,WAA3C,KAA2DN,OAAOO,SAAP,CAAiBD,WAD5E,IAEAV,gBAAgBO,GAAhB,EAAqBG,WAArB,CAAiCC,SAAjC,CAA2CD,WAA3C,KAA2DE,SAASD,SAAT,CAAmBD,WAHhF,EAIE;AACAD,oBAAQT,gBAAgBO,GAAhB,EAAqBG,WAArB,CAAiCC,SAAzC;AACD;;AAED;AACA,cAAME,eAAeb,gBAAgBO,GAAhB,CAArB;;AAEA;;;AAGA,cAAMO,QAAQ,SAARA,KAAQ,CAACC,UAAD,EAAaC,MAAb,EAAqBC,MAArB,EAAgC;AAC5C,mBAAOF,WAAWT,MAAX,CAAkB,UAAUY,GAAV,EAAeC,MAAf,EAAuB;AAC9C,kBAAI,OAAON,aAAaM,MAAb,CAAP,KAAgC,UAApC,EAAgD;AAC9CD,oBAAIC,MAAJ,IAAc,YAAa;AAAA,oDAATC,IAAS;AAATA,wBAAS;AAAA;;AACzBnB,0BAAQO,QAAR,CAAiBa,IAAjB,CAAsB;AACpBC,4BAAWf,GAAX,SAAkBY,MADE;AAEpBI,2BAAOtB,QAAQO,QAAR,CAAiBgB,QAAjB,CAA0BjB,GAA1B,CAFa;AAGpBa;AAHoB,mBAAtB;;AAMA,yBAAOP,aAAaM,MAAb,EAAqBM,KAArB,CAA2BZ,YAA3B,EAAyCO,IAAzC,CAAP;AACD,iBARD;AASD,eAVD,MAUO,IAAI,EAAED,UAAUD,GAAZ,CAAJ,EAAsB;AAC3Bd,uBAAOsB,cAAP,CAAsBR,GAAtB,EAA2BC,MAA3B,EAAmC;AACjCQ,qBADiC,iBAC1B;AACL,2BAAOd,aAAaM,MAAb,CAAP;AACD,mBAHgC;AAIjCS,qBAJiC,eAI5BC,KAJ4B,EAIrB;AACV5B,4BAAQO,QAAR,CAAiBa,IAAjB,CAAsB;AACpBC,8BAAQf,MAAM,GAAN,GAAYY,MAAZ,GAAqB,IADT;AAEpBI,6BAAOtB,QAAQO,QAAR,CAAiBgB,QAAjB,CAA0BjB,GAA1B,CAFa;AAGpBa,4BAAM,CAACS,KAAD;AAHc,qBAAtB;AAKAhB,iCAAaM,MAAb,IAAuBU,KAAvB;AACD;AAXgC,iBAAnC;AAaD;;AAED,qBAAOX,GAAP;AACD,aA5BM,EA4BJD,MA5BI,CAAP;AA6BD,WA9BD;;AAgCA;AACA,cAAI,OAAOJ,YAAP,KAAwB,UAA5B,EAAwC;AACtCZ,oBAAQM,GAAR,IAAe,YAAa;AAAA,iDAATa,IAAS;AAATA,oBAAS;AAAA;;AAC1BnB,sBAAQO,QAAR,CAAiBa,IAAjB,CAAsB;AACpBC,wBAAQf,GADY;AAEpBgB,uBAAOtB,QAAQO,QAAR,CAAiBgB,QAAjB,CAA0BjB,GAA1B,CAFa;AAGpBa;AAHoB,eAAtB;AAKA,qBAAOP,aAAaY,KAAb,CAAmB,IAAnB,EAAyBL,IAAzB,CAAP;AACD,aAPD;AAQD;;AAED;AACAnB,kBAAQM,GAAR,IAAeO,MAAMV,OAAOC,IAAP,CAAYQ,YAAZ,CAAN,EAAiCA,YAAjC,EAA+CZ,QAAQM,GAAR,CAA/C,CAAf,CArEoB,CAqEuD;AAC3E;AACAN,kBAAQM,GAAR,IAAeE,QAAQK,MAAMV,OAAO0B,mBAAP,CAA2BrB,KAA3B,CAAN,EAAyCA,KAAzC,EAAgDR,QAAQM,GAAR,CAAhD,CAAR,GAAwEN,QAAQM,GAAR,CAAvF;AAvEoB;AAwErB,OAxED,MAwEO;AACLN,gBAAQM,GAAR,IAAeP,gBAAgBO,GAAhB,CAAf;AACD;;AAED,aAAON,OAAP;AACD,KA9EM,EA8EJA,OA9EI,CAAP;AA+ED,GAhFD;AAiFD","file":"Context.js","sourcesContent":["export default function ContextProvider (extendedContext) {\n  return (context, funcDetails, payload) => {\n    return Object.keys(extendedContext).reduce((context, key) => {\n      if (context.debugger) {\n        context[key] = {}\n\n        /*\n          Grab the prototype to add methods to proxy.\n          We only grab actual added prototypes on first level, not nested and not\n          where prototype is base prototypes like Objects and Functions\n        */\n        let proto = null\n\n        if (\n          extendedContext[key].constructor &&\n          extendedContext[key].constructor.prototype.constructor !== Object.prototype.constructor &&\n          extendedContext[key].constructor.prototype.constructor !== Function.prototype.constructor\n        ) {\n          proto = extendedContext[key].constructor.prototype\n        }\n\n        // The value might be a function that is already wrapped, try grabbing the original\n        const contextValue = extendedContext[key]\n\n        /*\n          Wraps methods and sends their payload through the debugger\n        */\n        const proxy = (sourceKeys, source, target) => {\n          return sourceKeys.reduce(function (obj, objKey) {\n            if (typeof contextValue[objKey] === 'function') {\n              obj[objKey] = (...args) => {\n                context.debugger.send({\n                  method: `${key}.${objKey}`,\n                  color: context.debugger.getColor(key),\n                  args\n                })\n\n                return contextValue[objKey].apply(contextValue, args)\n              }\n            } else if (!(objKey in obj)) {\n              Object.defineProperty(obj, objKey, {\n                get () {\n                  return contextValue[objKey]\n                },\n                set (value) {\n                  context.debugger.send({\n                    method: key + '.' + objKey + ' =',\n                    color: context.debugger.getColor(key),\n                    args: [value]\n                  })\n                  contextValue[objKey] = value\n                }\n              })\n            }\n\n            return obj\n          }, target)\n        }\n\n        // If the context value is a function, wrap it\n        if (typeof contextValue === 'function') {\n          context[key] = (...args) => {\n            context.debugger.send({\n              method: key,\n              color: context.debugger.getColor(key),\n              args\n            })\n            return contextValue.apply(null, args)\n          }\n        }\n\n        // Go through keys original value and wrap any attached methods\n        context[key] = proxy(Object.keys(contextValue), contextValue, context[key])// Object.keys(contextValue).reduce(proxy, context[key])\n        // Go through proto\n        context[key] = proto ? proxy(Object.getOwnPropertyNames(proto), proto, context[key]) : context[key]\n      } else {\n        context[key] = extendedContext[key]\n      }\n\n      return context\n    }, context)\n  }\n}\n"]}