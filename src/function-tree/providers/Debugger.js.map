{"version":3,"sources":["../../src/providers/Debugger.js"],"names":["DebuggerProvider","safeStringify","obj","cache","returnValue","JSON","stringify","key","value","indexOf","push","options","window","chrome","process","versions","electron","Error","isConnected","APP_ID","String","Date","now","VERSION","backlog","send","debuggingData","context","functionDetails","payload","type","data","name","execution","executionId","id","functionIndex","staticTree","datetime","detail","app","version","event","CustomEvent","dispatchEvent","sendInitial","functionTrees","addEventListener","debugger","getColor","colors"],"mappings":"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","file":"Debugger.js","sourcesContent":["/* global CustomEvent */\nfunction safeStringify (obj) {\n  let cache = []\n  const returnValue = JSON.stringify(obj || {}, function (key, value) {\n    if (typeof value === 'object' && value !== null) {\n      if (cache.indexOf(value) === -1) {\n        cache.push(value)\n\n        return value\n      }\n      return '[CIRCULAR]'\n    }\n    return value\n  })\n\n  cache = null\n\n  return returnValue\n}\n\nexport default function DebuggerProvider (options = {}) {\n  if (typeof window === 'undefined' ||\n      (\n        typeof window.chrome === 'undefined' &&\n        !process && !process.versions && !process.versions.electron\n      )\n    ) {\n    throw new Error('The debugger does not work in this environment, load up the Node debugger instead')\n  }\n\n  let isConnected = false\n  const APP_ID = String(Date.now())\n  const VERSION = 'v1'\n  const backlog = []\n\n  function send (debuggingData, context, functionDetails, payload) {\n    const type = 'execution'\n    const data = {\n      name: context.execution.name,\n      executionId: context.execution.id,\n      functionIndex: functionDetails.functionIndex,\n      staticTree: context.execution.staticTree,\n      payload: payload,\n      datetime: context.execution.datetime,\n      data: debuggingData\n    }\n\n    if (!isConnected) {\n      backlog.push(data)\n      return\n    }\n    const detail = {\n      app: APP_ID,\n      version: VERSION,\n      type,\n      data\n    }\n\n    const event = new CustomEvent('function-tree.client.message', {\n      detail: safeStringify(detail)\n    })\n    window.dispatchEvent(event)\n  }\n\n  function sendInitial (type) {\n    const event = new CustomEvent('function-tree.client.message', {\n      detail: safeStringify({\n        app: APP_ID,\n        version: VERSION,\n        type,\n        data: {\n          functionTrees: backlog\n        }\n      })\n    })\n    window.dispatchEvent(event)\n  }\n\n  window.addEventListener('function-tree.debugger.pong', function () {\n    // When debugger already active, send new init cause new messages\n    // might have been prepared while it was waiting for pong\n    isConnected = true\n    sendInitial('reinit')\n  })\n  window.addEventListener('function-tree.debugger.ping', function () {\n    // When debugger activates\n    isConnected = true\n    sendInitial('init')\n  })\n\n  sendInitial('init')\n\n  return (context, functionDetails, payload) => {\n    context.debugger = {\n      send (data) {\n        send(data, context, functionDetails, payload)\n      },\n      getColor (key) {\n        return options.colors[key] || '#333'\n      }\n    }\n\n    send(null, context, functionDetails, payload)\n\n    return context\n  }\n}\n"]}